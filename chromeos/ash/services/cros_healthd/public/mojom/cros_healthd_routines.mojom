// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Definitions for the diagnostics API exposed by the cros_healthd daemon. This
// API is normally consumed by the browser and the diag command-line tool.

// NOTE: This mojom should be kept in sync with the copy in ChromiumOS repo in
// src/platform2/diagnostics/mojom/public/cros_healthd_routines.mojom.

module ash.cros_healthd.mojom;

import "mojo/public/mojom/base/time.mojom";
import "chromeos/ash/services/cros_healthd/public/mojom/cros_healthd_exception.mojom";

// Routines interface exposed by the cros_healthd daemon.
//
// NextMinVersion: 2, NextIndex: 1
[Stable]
interface CrosHealthdRoutinesService {
  // Requests that a routine using the RoutineControl API is created on the
  // platform. This function creates a different routine based on the
  // RoutineArgument supplied.
  //
  // Error Handling:
  // This method will result in the creation of the routine on the device, which
  // might require allocation of additional resources and checking preconditions
  // for the routine, e.g. available hardware, correct arguments, etc.
  //
  // All exceptions that occur (either during initialization or while executing
  // the routine) will close the connection to the provided RoutineControl
  // with a specific reason (see cros_healthd.mojom.Exception) and a string
  // message containing human readable information about the exception.
  // For that reason it is necessary to always setup a disconnect handler on the
  // RoutineControl remote to be informed about potential exceptions.
  //
  // Please note exceptions are different from a routine reporting `has_passed
  // == false` (in case it failed, see RoutineStateFinished). Exception are
  // something not intended to happen. The details of the reasons for Exceptions
  // can be found in cros_healthd.mojom.Exception type and the corresponding
  // reason enum.
  //
  // To know if an exception occurs during the initialization, callers can wait
  // for the routine being initialized (get via `GetState` or RoutineObserver)
  // on the RoutineControl remote, before calling the `Start` method.
  //
  // The request:
  // * |routine_argument| - a RoutineArgument type that provides all the
  //                        necessary parameters and configs to create a
  //                        particular type of routine.
  // * |routine_receiver| - a receiver that will be bound to the actual routine
  //                        control implementation, where the remote will be
  //                        held by the client for starting the routine.
  //
  // * |routine_observer| - an optional observer to receive status updates about
  //                        changing routine states.
  [MinVersion=1] CreateRoutine@0(RoutineArgument routine_argument,
      pending_receiver<RoutineControl> routine_receiver,
      pending_remote<RoutineObserver>? routine_observer);
};

// Argument types for the possible routines the routine control API can create.
//
// NextMinVersion: 1, NextIndex: 1
[Stable, Extensible]
union RoutineArgument {
  // Default field is required by extensible unions for backward compatibility.
  // Any unrecognized Mojo field will deserialize to this field. Don't use this.
  [Default] bool unrecognizedArgument @0;
};

// Interface exposed to clients for controlling a routine.
//
// Error Handling:
// Please check the Error Handling section of CrosHealthdRoutinesService.
//
// NextMinVersion: 1, NextIndex: 0
[Stable]
interface RoutineControl {};

// Implemented by clients who desire routine update notifications.
//
// NextMinVersion: 1, NextIndex: 1
[Stable]
interface RoutineObserver {};

// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// API and definitions exposed by the Telemetry Routine Services. This API is
// normally consumed by the Telemetry Extension APIs implementation.

// Note: this is a subset of the cros_healthd routine service interface which is
// located in
// //chromeos/ash/services/cros_healthd/public/mojom/cros_healthd_routines.mojom
// This interface serves as PII filtering and data post-processing service
// between the source (cros_healthd) and the clients
// (third-party telemetry extensions).
//
// This interface is in the process of being synced to Chromium from ChromiumOS.
// Thus, we have the following routines that are supported by cros_healthd in
// ChromiumOS but not yet part of this crosapi interface (in both
// `TelemetryDiagnosticRoutineArgument` and `TelemetryDiagnosticRoutineDetail`):
// - Memory routine
// - Audio driver routine
// - Cpu stress routine
// - Ufs lifetime routine
// - Disk read routine
// - Cpu cache routine
// - Prime search routine
// - Volume button routine
// - Led lit up routine

module crosapi.mojom;

import "chromeos/crosapi/mojom/telemetry_extension_exception.mojom";

// Argument types for the possible routines the routine control API can create.
//
// NextMinVersion: 1, NextIndex: 1
[Stable, Extensible]
union TelemetryDiagnosticRoutineArgument {
  // Default field is required by extensible unions for backward compatibility.
  // Any unrecognized Mojo field will deserialize to this field. Don't use this.
  [Default] bool unrecognizedArgument @0;
};

// Interface exposed to clients for controlling a routine.
//
// Error Handling:
// Please check the Error Handling section of
// TelemetryDiagnosticRoutinesService.
//
// NextMinVersion: 1, NextIndex: 0
[Stable]
interface TelemetryDiagnosticRoutineControl {};

// Implemented by clients who desire routine update notifications.
//
// NextMinVersion: 1, NextIndex: 1
[Stable]
interface TelemetryDiagnosticRoutineObserver {};

// Diagnostic Routines interface exposed to Lacros, implemented in Ash.
//
// NextMinVersion: 2, NextIndex: 1
[Stable, Uuid="0c7a9109-17eb-459d-82cd-60903bba315d"]
interface TelemetryDiagnosticRoutinesService {
  // Requests that a routine using the RoutineControl API is created on the
  // platform. This function creates a different routine based on the
  // RoutineArgument supplied.
  //
  // Error Handling:
  // This method will result in the creation of the routine on the device, which
  // might require allocation of additional resources and checking preconditions
  // for the routine, e.g. available hardware, correct arguments, etc.
  //
  // All exceptions that occur (either during initialization or while executing
  // the routine) will close the connection to the provided
  // TelemetryDiagnosticRoutineControl with a specific reason (see
  // crosapi.mojom.TelemetryExtensionException) and a string message containing
  // human readable information about the exception.
  // For that reason it is necessary to always setup a disconnect handler on the
  // TelemetryDiagnosticRoutineControl remote to be informed about potential
  // exceptions.
  //
  // Please note exceptions are different from a routine reporting `has_passed
  // == false` (in case it failed, see TelemetryDiagnosticRoutineStateFinished).
  // Exception are something not intended to happen. The details of the reasons
  // for Exceptions can be found in crosapi.mojom.TelemetryExtensionException
  // type and the corresponding reason enum.
  //
  // To know if an exception occurs during the initialization, callers can wait
  // for the routine being initialized (get via `GetState` or
  // TelemetryDiagnosticRoutineObserver) on the
  // TelemetryDiagnosticRoutineControl remote, before calling the `Start`
  // method.
  //
  // The request:
  // * |routine_argument| - a RoutineArgument type that provides all the
  //                        necessary parameters and configs to create a
  //                        particular type of routine.
  // * |routine_receiver| - a receiver that will be bound to the actual routine
  //                        control implementation, where the remote will be
  //                        held by the client for starting the routine.
  //
  // * |routine_observer| - an optional observer to receive status updates about
  //                        changing routine states.
  [MinVersion=1] CreateRoutine@0(
      TelemetryDiagnosticRoutineArgument routine_argument,
      pending_receiver<TelemetryDiagnosticRoutineControl> routine_receiver,
      pending_remote<TelemetryDiagnosticRoutineObserver>? routine_observer);
};
